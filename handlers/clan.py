import json
import random
import time

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import CtxStorage

from utils.config import *
from utils.states import *
from models.user import *
from utils.keyboards import *

labeler=BotLabeler()
labeler.vbml_ignore_case=True
labeler.auto_rules=[rules.PeerRule(from_chat=False)]

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"clan":"enter"})
async def back(message: Message):
    await message.answer(text_clan2, keyboard=await menu_clan2())

@labeler.message(text=["–≤–æ–π—Ç–∏"], payload={"menu":"clan"})
async def enter(message: Message):
    clans=ClanModel().select().where(ClanModel.free > 0)
    text=""
    for i in range(6):
        if i < len(clans):
            text+=clans[i].get_info() + "\n"
    await message.answer("–ö–ª–∞–Ω—ã —Å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ö–æ–¥–æ–º\n"+text, keyboard=await menu_free_clans(clans))

@labeler.message(payload_contains={"clan":"choose"})
async def choose(message: Message):
    id=json.loads(message.payload)["info"]
    clan=ClanModel().get_by_id(id)
    if clan.member_count < clan.lvl*5:
        user=CtxStorage().get(message.from_id)
        user.clan=id
        user.save()
        await message.answer(text_clan1, keyboard=await menu_clan1())
    else:
        await message.answer("–í –∫–ª–∞–Ω–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")

@labeler.message(text=["—Å–ª–µ–¥—É—é—â–∏–µ"], payload_contains={"clan":"enter"})
async def next(message: Message):
    clans=ClanModel().select().where(ClanModel.free > 0)
    n=json.loads(message.payload)["info"]
    text=""
    if n <= len(clans):
        for i in range(n, n+6):
            if i < len(clans):
                text+=clans[i].get_info() + "\n"
        await message.answer("–ö–ª–∞–Ω—ã —Å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ö–æ–¥–æ–º\n"+text, keyboard=await menu_free_clans(clans, n))
    else:
        await message.answer("–ë–æ–ª—å—à–µ –∫–ª–∞–Ω–æ–≤ –Ω–µ—Ç")

@labeler.message(text=["–ø—Ä–µ–¥—ã–¥—É—â–∏–µ"], payload_contains={"clan":"enter"})
async def previous(message: Message):
    clans=ClanModel().select().where(ClanModel.free > 0)
    n=json.loads(message.payload)["info"]
    text=""
    if n >= 0:
        for i in range(n, n+6):
            if i < len(clans):
                text+=clans[i].get_info() + "\n"
        await message.answer("–ö–ª–∞–Ω—ã —Å —Å–≤–æ–±–æ–¥–Ω—ã–º –≤—Ö–æ–¥–æ–º\n"+text, keyboard=await menu_free_clans(clans, n))
    else:
        await message.answer("–ë–æ–ª—å—à–µ –∫–ª–∞–Ω–æ–≤ –Ω–µ—Ç")

@labeler.message(text=["–≤—ã–π—Ç–∏"], payload={"menu":"clan"})
async def exit(message: Message):
    user=CtxStorage().get(message.from_id)
    if user.clan_lvl == 5 and user.clan.member_count > 1:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω, –ø–µ—Ä–µ–¥–∞–π—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É")
        return
    user.clan.member_count-=1
    if user.clan.member_count < 1:
        ClanModel().delete_by_id(user.clan.id)
    user.clan=None
    user.save()
    await message.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω")
    await message.answer(text_clan2, keyboard=await menu_clan2())

@labeler.message(text=["–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"], payload={"menu":"clan"})
async def info(message: Message):
    user=CtxStorage().get(message.from_id)
    await message.answer(f"üí¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ: {user.clan.name}...")
    time.sleep(1.5)
    await message.answer(user.clan.to_string())

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"menu":"clan"})
async def back(message: Message):
    await message.answer(text_main, keyboard=await menu_main())

@labeler.message(text=["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"], payload={"menu":"clan"})
async def settings(message: Message):
    user=CtxStorage().get(message.from_id)
    if user.clan_lvl != 5:
        await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ {user.clan.fifth}")
        return
    await message.answer(user.clan.settings(), keyboard=await menu_clan_settings(user.clan.get_settings()))

@labeler.message(text=["–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å"], payload={"menu":"clan"})
async def settings(message: Message):
    await message.answer(text_clan_resources, keyboard=await menu_clan_resources())

@labeler.message(text=["—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω"], payload={"menu":"clan"})
async def create(message: Message):
    user=CtxStorage().get(message.from_id)
    if user.balance >= 1000000:
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ", keyboard=Keyboard().add(Text("–û—Ç–º–µ–Ω–∞")))
        await state_dispenser.set(message.from_id, ClanRegisterState.NAME)
    else:
        await message.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

@labeler.message(state=ClanRegisterState.NAME)
async def name(message: Message):
    await state_dispenser.delete(message.from_id)
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer(text_clan2, keyboard=await menu_clan2())
    else:
        user=CtxStorage().get(message.from_id)
        clan=ClanModel()
        clan.name = message.text
        clan.red=random.randint(0, 255)
        clan.green=random.randint(0, 255)
        clan.blue=random.randint(0, 255)
        clan.save()
        user.clan=clan
        user.clan_lvl=5
        user.balance-=1000000
        user.save()
        await message.answer("–ö–ª–∞–Ω —Å–æ–∑–¥–∞–Ω")
        await message.answer(text_clan1, keyboard=await menu_clan1())

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"clan":"settings"})
async def back(message: Message):
    await message.answer(text_clan1, keyboard=await menu_clan1())

@labeler.message(text=["—Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥"], payload={"clan":"settings"})
async def setting_free(message: Message):
    user=CtxStorage().get(message.from_id)
    user.clan.free = False if bool(user.clan.free) is True else True
    user.clan.save()
    await message.answer(user.clan.settings(), keyboard=await menu_clan_settings(user.clan.get_settings()))

@labeler.message(payload_contains={"clan":"invitation"})
async def accept(message: Message):
    user=CtxStorage().get(message.from_id)
    if user.clan is not None:
        await message.answer("–í—ã —É–∂–µ –≤ –∫–ª–∞–Ω–µ")
        return
    clanid=json.loads(message.payload)["info"]
    clan=ClanModel().get_by_id(clanid)
    if clan.member_count >= clan.lvl*5:
        await message.answer("–í –∫–ª–∞–Ω–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
        return
    user.clan=clanid
    user.clan.member_count+=1
    user.clan_lvl=1
    user.save()
    await message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"clan":"resources"})
async def back(message: Message):
    await message.answer(text_clan1, keyboard=await menu_clan1())

@labeler.message(text=["—Ç–∏—Ç–∞–Ω"], payload={"clan":"resources"})
async def set_res(message: Message):
    await state_dispenser.set(message.from_id, Clan.SET_TITAN)
    await message.answer("üí¨ –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", keyboard=Keyboard().add(Text("–û—Ç–º–µ–Ω–∞")))

@labeler.message(text=["–ø–ª–∞–∑–º–∞"], payload={"clan":"resources"})
async def set_res(message: Message):
    await state_dispenser.set(message.from_id, Clan.SET_PLASMA)
    await message.answer("üí¨ –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", keyboard=Keyboard().add(Text("–û—Ç–º–µ–Ω–∞")))

@labeler.message(text=["–¥–∞–º–∞—Å–∫"], payload={"clan":"resources"})
async def set_res(message: Message):
    await state_dispenser.set(message.from_id, Clan.SET_DAMASK)
    await message.answer("üí¨ –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", keyboard=Keyboard().add(Text("–û—Ç–º–µ–Ω–∞")))

@labeler.message(text=["—ç–Ω–µ—Ä–≥–∏—è"], payload={"clan":"resources"})
async def set_res(message: Message):
    await state_dispenser.set(message.from_id, Clan.SET_ENERGY)
    await message.answer("üí¨ –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", keyboard=Keyboard().add(Text("–û—Ç–º–µ–Ω–∞")))

@labeler.message(state=Clan.SET_TITAN)
async def set_titan(message: Message):
    if message.text=="–û—Ç–º–µ–Ω–∞":
        await state_dispenser.delete(message.from_id)
        await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
        return
    try:
        count=int(message.text)
        user=CtxStorage().get(message.from_id)
        if user.titan<count:
            await message.answer("–£ –Ω–∞—Å —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç")
        else:
            user.titan-=count
            user.save()
            user.clan.titan+=count
            user.clan.save()
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await state_dispenser.delete(message.from_id)
            await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
    except:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é")

@labeler.message(state=Clan.SET_PLASMA)
async def set_plasma(message: Message):
    if message.text=="–û—Ç–º–µ–Ω–∞":
        await state_dispenser.delete(message.from_id)
        await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
        return
    try:
        count=int(message.text)
        user=CtxStorage().get(message.from_id)
        if user.plasma<count:
            await message.answer("–£ –Ω–∞—Å —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç")
        else:
            user.plasma-=count
            user.save()
            user.clan.plasma+=count
            user.clan.save()
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await state_dispenser.delete(message.from_id)
            await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
    except:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é")

@labeler.message(state=Clan.SET_DAMASK)
async def set_damask(message: Message):
    if message.text=="–û—Ç–º–µ–Ω–∞":
        await state_dispenser.delete(message.from_id)
        await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
        return
    try:
        count=int(message.text)
        user=CtxStorage().get(message.from_id)
        if user.damask<count:
            await message.answer("–£ –Ω–∞—Å —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç")
        else:
            user.damask-=count
            user.save()
            user.clan.damask+=count
            user.clan.save()
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await state_dispenser.delete(message.from_id)
            await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
    except:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é")

@labeler.message(state=Clan.SET_ENERGY)
async def set_energy(message: Message):
    if message.text=="–û—Ç–º–µ–Ω–∞":
        await state_dispenser.delete(message.from_id)
        await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
        return
    try:
        count=int(message.text)
        user=CtxStorage().get(message.from_id)
        if user.energy<count:
            await message.answer("–£ –Ω–∞—Å —Å—Ç–æ–ª—å–∫–æ –Ω–µ—Ç")
        else:
            user.energy-=count
            user.save()
            user.clan.energy+=count
            user.clan.save()
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await state_dispenser.delete(message.from_id)
            await message.answer(text_clan_resources, keyboard=await menu_clan_resources())
    except:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é")