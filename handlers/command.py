import json
import random
import time
import re

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import CtxStorage

from models.user import *
from utils.keyboards import *
from utils.config import *
from utils.states import *

labeler = BotLabeler()
labeler.vbml_ignore_case = True
labeler.auto_rules = [rules.StateGroupRule(state_group=None)]

@labeler.message(text=["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"])
async def inventory(message: Message):
    user = CtxStorage().get(message.from_id)
    await message.answer("üí¨ –í—ã–ø–æ–ª–Ω—è—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–æ–≤–æ–≥–æ –æ—Ç—Å–µ–∫–∞...")
    time.sleep(1.5)
    await message.answer(user.inventory())

@labeler.message(text=["—è", "z", "–ø—Ä–æ—Ñ–∏–ª—å"])
async def me(message: Message):
    user = CtxStorage().get(message.from_id)
    await message.answer("üí¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ...")
    time.sleep(1.5)
    await message.answer(user.to_string(), keyboard=(Keyboard(inline=True)
        .add(Text(user.weapon.name, {"weapon":"info", "info":user.weapon.id}), KeyboardButtonColor.NEGATIVE)
        .add(Text(user.armor.name, {"armor":"info", "info":user.armor.id}), KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text(user.ship.name, {"ship":"info", "info":user.ship.id}), KeyboardButtonColor.PRIMARY)))

@labeler.message(payload_contains={"weapon":"info"})
async def weapon(message: Message):
    id=json.loads(message.payload)["info"]
    print("ok")
    weapon=ItemModel().get_by_id(id)
    await message.answer(weapon.to_string())

@labeler.message(payload_contains={"armor":"info"})
async def armor(message: Message):
    id=json.loads(message.payload)["info"]
    armor=ItemModel().get_by_id(id)
    await message.answer(armor.to_string())

@labeler.message(payload_contains={"ship":"info"})
async def ship(message: Message):
    id=json.loads(message.payload)["info"]
    ship=ShipModel().get_by_id(id)
    await message.answer(ship.to_string())

""" @labeler.message(text=["–¥—É—ç–ª—å", "–¥—É—ç–ª—å <user>"])
async def duel(message: Message, user=None):
    if user is None:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
        return
    else:
        user=re.findall(r"[0-9]+", user)[0]
        userto = get_user(int(user))
        if userto is None:
            await message.answer("–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç")
        return
    #work
 """
@labeler.message(text=["–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å", "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å <id>"])
async def invitation(message: Message, id=None):
    user=CtxStorage().get(message.from_id)
    if user.clan is None:
        await message.answer("–í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ")
        return
    if id is None:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
        return
    if user.clan.member_count >= user.clan.lvl*5:
        await message.answer("–í –∫–ª–∞–Ω–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
        return
    id=re.findall(r"[0-9]+", id)[0]
    to=get_user(int(id))
    if to is None:
        await message.answer("–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç")
        return
    if to.clan is not None:
        await message.answer("–û–Ω —É–∂–µ –≤ –∫–ª–∞–Ω–µ")
        return
    await message.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await api.messages.send(int(id), message=f"üí¨ –ù–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –∫–ª–∞–Ω: {user.clan.name}", 
        keyboard=(Keyboard(inline=True)
        .add(Text("–ü—Ä–∏–Ω—è—Ç—å", {"clan":"invitation", "info":user.clan.id}), KeyboardButtonColor.POSITIVE)
        .add(Text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", {"menu":"clan"}), KeyboardButtonColor.NEGATIVE)), random_id=0)
    await api.messages.send(user_id=int(id), message="üí≠ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", random_id=0)

@labeler.message(text=["—Å–µ–∫—Ç–æ—Ä"])
async def sector(message: Message):
    user=CtxStorage().get(message.from_id)
    await message.answer("üí¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–∞—à–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...")
    time.sleep(1.5)
    await message.answer(user.sector.to_string(), keyboard=(Keyboard(inline=True).add(Text("–ù–∞—á–∞—Ç—å –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤"), KeyboardButtonColor.PRIMARY)))

@labeler.message(text=["–ú–∞–π–Ω–∏–Ω–≥", "–ù–∞—á–∞—Ç—å –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±—ã—á—É"])
async def resources(message: Message):
    user=CtxStorage().get(message.from_id)
    await state_dispenser.set(message.from_id, MiningState.WAIT)
    res_name=["–¢–∏—Ç–∞–Ω", "–ü–ª–∞–∑–º–∞", "–î–∞–º–∞—Å–∫", "–≠–Ω–µ—Ä–≥–∏—è"]
    res_chance=[user.sector.titan, user.sector.plasma, user.sector.damask, user.sector.energy]
    for i in range(4):
        if random.randint(1, 100) <= res_chance[i]:
            res=random.randint(1, 100)
            await message.answer(f"‚õè –ù–∞–π–¥–µ–Ω–æ {res} {res_name[i]}")
            if i == 0:
                if user.titan+res > user.ship.max_titan:
                    user.titan=user.ship.max_titan
                else:
                    user.titan+=res
            elif i == 1:
                if user.plasma+res > user.ship.max_plasma:
                    user.plasma=user.ship.max_plasma
                else:
                    user.plasma+=res
            elif i == 2:
                if user.damask+res > user.ship.max_damask:
                    user.damask=user.ship.max_damask
                else:
                    user.damask+=res
            elif i == 3:
                if user.energy+res > user.ship.max_energy:
                    user.energy=user.ship.max_energy
                else:
                    user.energy+=res
        else:
            await message.answer(f"‚õè –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {res_name[i]}")
        time.sleep(1)
    user.save()
    await message.answer(user.inventory(), keyboard=Keyboard(inline=True).add(Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±—ã—á—É"), KeyboardButtonColor.PRIMARY))
    await state_dispenser.delete(message.from_id)

@labeler.private_message(text=["–º–µ–Ω—é", "menu"])
async def menu(message: Message):
    await message.answer("–º–µ–Ω—é", payload={"menu":"main"}, keyboard=await menu_main())

@labeler.message(text=["–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <to>", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <to> <count>"])
async def transfer_money(message: Message, to=None, count=None):
    user=CtxStorage().get(message.from_id)
    if to is None or count is None:
        await message.answer("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
    else:
        try:
            to=re.findall(r"[0-9]+", to)[0]
            userto = get_user(int(to))
            if userto is None:
                await message.answer("–¢–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç")
                return
            if user.balance > int(count):
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            userto.balance=-int(count)
            userto.save()
            to.balance=+int(count)
            to.save()
        except:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")

@labeler.private_message(text=["–∞–¥–º–∏–Ω"])
async def menu(message: Message):
    if message.from_id in admin_ids:
        await message.answer(text_admin, keyboard=await menu_admin())
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á–µ–º —Ä–µ—á—å")

@labeler.message(text=["–∫–∏–∫", "–∫–∏–∫ <id>"])
async def kick(message: Message, id=None):
    user=CtxStorage().get(message.from_id)
    if user.clan is None:
        await message.answer("–í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ")
        return
    if user.clan_lvl != 5:
        await message.answer("–í—ã –Ω–µ –ª–∏–¥–µ—Ä")
        return
    if id is None:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫")
        return
    id=re.findall(r"[0-9]+", id)[0]
    to=get_user(int(id))
    if to.clan != user.clan:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞")
        return
    to.clan=None
    to.save()
    await message.answer(f"–í—ã –∫–∏–∫–Ω—É–ª–∏ {to.name}")

@labeler.message(text=["–ø–æ–≤—ã—Å–∏—Ç—å", "–ø–æ–≤—ã—Å–∏—Ç—å <id>"])
async def up(message: Message, id=None):
    user=CtxStorage().get(message.from_id)
    if user.clan is None:
        await message.answer("–í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ")
        return
    if user.clan_lvl != 5:
        await message.answer("–í—ã –Ω–µ –ª–∏–¥–µ—Ä")
        return
    if id is None:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫")
        return
    id=re.findall(r"[0-9]+", id)[0]
    to=get_user(int(id))
    if to.clan != user.clan:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞")
        return
    to.clan_lvl+=1
    if to.clan_lvl==5:
        user.clan_lvl=4
        await message.answer(f"–í–∞—Å –ø–æ–Ω–∏–∑–∏–ª–∏ –ø–æ–≤—ã—Å–∏–ª–∏ {to.name} –¥–æ {to.clan_lvl}")
    to.save()
    await message.answer(f"–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ {to.name} –¥–æ {to.clan_lvl}")

@labeler.message(text=["–ø–æ–Ω–∏–∑–∏—Ç—å", "–ø–æ–Ω–∏–∑–∏—Ç—å <id>"])
async def down(message: Message, id=None):
    user=CtxStorage().get(message.from_id)
    if user.clan is None:
        await message.answer("–í—ã –Ω–µ –≤ –∫–ª–∞–Ω–µ")
        return
    if user.clan_lvl != 5:
        await message.answer("–í—ã –Ω–µ –ª–∏–¥–µ—Ä")
        return
    if id is None:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –∏–≥—Ä–æ–∫")
        return
    id=re.findall(r"[0-9]+", id)[0]
    to=get_user(int(id))
    if to.clan != user.clan:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –∏–∑ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞")
        return
    if to.clan_lvl==1:
        await message.answer("–ò–≥—Ä–æ–∫ –∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
        return
    to.clan_lvl-=1
    to.save()
    await message.answer(f"–í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ {to.name} –¥–æ {to.clan_lvl}")

@labeler.message(text=["–∫–∞—Ä—Ç–∞"])
async def map(message: Message):
    await message.answer("üí¨ –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É...")
    time.sleep(1.5)
    photo = await photo_uploader.upload(
        file_source="assets/other/map.png",
        peer_id=message.peer_id,
    )
    await message.answer("üí¨ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ä—Ç–∞ –º–∏—Ä–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ", attachment=photo)

@labeler.message(text=["ping"])
async def pong(message: Message):
    user=CtxStorage().get(message.from_id)
    user.add_item(1)
    await message.answer("üí¨ ok")

@labeler.message(text=["pong"])
async def pong(message: Message):
    user=CtxStorage().get(message.from_id)
    user.del_item(1)
    await message.answer("üí¨ ok")