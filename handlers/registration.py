import time, datetime

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text, CtxStorage

from utils.config import *
from utils.states import *
from utils.keyboards import *
from models.user import *

labeler = BotLabeler()
labeler.vbml_ignore_case = True
labeler.auto_rules = [rules.PeerRule(from_chat=False)]

@labeler.message(text=["–Ω–∞—á–∞—Ç—å", "/–Ω–∞—á–∞—Ç—å"])
async def start(message: Message):
    if exist(message.from_id):
        await message.answer("–ù–∞—á–∞—Ç—å —á—Ç–æ?")
    else:
        UserModel.create(id=message.from_id, datetime=time.time())
        await message.answer("üí¨ –û-–æ...")
        time.sleep(1)
        await message.answer("üí¨ –•–æ—Ç—å –∫–æ–≥–æ-—Ç–æ —Å–º–æ–≥ —è –Ω–∞–π—Ç–∏ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞–Ω–µ—Ç–µ!\
                             \n–¢–∞–∫, –Ø, –ø—Ä–∏–∑—Ä–∞–∫ - —Ä–∞—É–∑–º–Ω—ã–π —Ä–æ–±–æ—Ç, —Å–æ–∑–¥–∞–Ω –ø–æ–º–æ–≥–∞—Ç—å, –∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–π:")
        time.sleep(1)
        await message.answer("üí¨ –ê... —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∞–º—è—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.\
                             \n–õ–∞–¥–Ω–æ, —Å–µ–π—á–∞—Å –º–æ–π —Å–∫–∞–Ω–µ—Ä –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Ç—ã –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞?", keyboard=Keyboard(one_time=True)
                            .add(Text("–ú—É–∂—Å–∫–æ–π"))
                            .add(Text("–ñ–µ–Ω—Å–∫–∏–π")))
        await state_dispenser.set(message.from_id, RegisterState.SEX)

@labeler.message(state=RegisterState.SEX)
async def sex(message: Message):
    text=message.text.lower()
    user=CtxStorage().get(message.from_id)
    if text in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        if text=="–º—É–∂—Å–∫–æ–π":
            user.sex=True
        else:
            user.sex=False
        user.save()
        await message.answer("–¶–≤–µ—Ç –∫–æ–∂–∏", keyboard=(
            Keyboard(one_time=True)
            .add(Text("1"))
            .add(Text("2"))
            .add(Text("3"))))
        await state_dispenser.set(message.from_id, RegisterState.SKIN)
    else:
        await message.answer("–ß—Ç–æ?")

@labeler.message(state=RegisterState.SKIN)
async def skin(message: Message):
    if message.text in ("1", "2", "3"):
        user=CtxStorage().get(message.from_id)
        user.skin=int(message.text)
        user.save()
        await message.answer("–í–æ–ª–æ—Å—ã", keyboard=(
            Keyboard(one_time=True)
            .add(Text("1"))
            .add(Text("2"))
            .add(Text("3"))))
        await state_dispenser.set(message.from_id, RegisterState.HAIRSTYLE)
    else:
        await message.answer("–ß—Ç–æ?")

@labeler.message(state=RegisterState.HAIRSTYLE)
async def hairstyle(message: Message):
    if message.text in ("1", "2", "3"):
        user=CtxStorage().get(message.from_id)
        user.hairstyle=int(message.text)
        user.save()
        await message.answer("–ò–º—è")
        await state_dispenser.set(message.from_id, RegisterState.NICKNAME)
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é")

@labeler.message(state=RegisterState.NICKNAME)
async def nickname(message: Message):
    if len(message.text) < 5:
        await message.answer("–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")
    elif len(message.text) > 20:
        await message.answer("–î–ª–∏–Ω–Ω–æ–µ –∏–º—è")
    else:
        user = CtxStorage().get(message.from_id)
        user.name = message.text
        user.save()
        await state_dispenser.delete(message.from_id)
        await message.answer("–ì–æ—Ç–æ–≤–æ")
        await message.answer(text_main, keyboard=await menu_main())