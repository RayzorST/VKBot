import random
import json
import datetime, time

from vkbottle.bot import BotLabeler, Message, rules
from vkbottle import Keyboard, Text, CtxStorage

from utils.config import *
from utils.states import *
from models.user import *
from utils.keyboards import *

labeler = BotLabeler()
labeler.vbml_ignore_case = True
labeler.auto_rules = [rules.PeerRule(from_chat=False)]

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"menu":"sector"})
async def back(message: Message):
    await message.answer(text_main, keyboard=await menu_main())

@labeler.message(text=["–ø–µ—Ä–µ–ª—ë—Ç", "–æ–±–Ω–æ–≤–∏—Ç—å"], payload={"menu":"sector"})
async def info(message: Message):
    await message.answer("üí¨ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–µ–∫—Ç–æ—Ä–∞—Ö...")
    user=CtxStorage().get(message.from_id)
    x = user.sector.x
    y = user.sector.y
    result = "üí¨ –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ —Å–µ–∫—Ç–æ—Ä–∞—Ö:\n\n"
    sectors = []
    for i in range(x-1, x+2):
        for j in range(y-1, y+2):
            if i is not x or j is not y:
                sector=SectorModel().get_or_none(x=i, y=j)
                if sector is not None:
                    sectors.append(sector)
                else:
                    sectors.append([i, j])
    for i in range(0, len(sectors)):
        result += (sectors[i].info() if isinstance(sectors[i], SectorModel) is True else f"‚ùì–ù–∞–∑–≤–∞–Ω–∏–µ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\nüåê–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {sectors[i][0]}:{sectors[i][1]}\n‚õè–†–µ—Å—É—Ä—Å—ã: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + '\n\n' 
    time.sleep(1.5)
    await message.answer(result, keyboard=await menu_flight(sectors))

@labeler.message(text=["–Ω–∞–∑–∞–¥"], payload={"menu":"flight"})
async def back(message: Message):
    await message.answer(text_sector, keyboard=await menu_sector())

@labeler.message(state=SectorState.GAME)
async def game(message: Message):
    await message.answer(f"üí¨ –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞—é... –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω—è—Ç—å...")
    data=message.state_peer.payload["payload"]["sector"]
    time.sleep(2)
    if int(message.text) is random.randint(0, 2):
        if data[0] < data[1] - 1:
            await message.answer(f"üí¨ –£—Å–ø–µ—à–Ω—ã–π –º–∞–Ω—ë–≤—Ä! –û—Å—Ç–∞–ª–æ—Å—å {data[0]+1} –∏–∑ {data[1]}\
                                 \n\nüí≠ –î–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å \"1\" –∏–ª–∏ \"2\"", keyboard=await menu_game())
            await state_dispenser.set(message.from_id, SectorState.GAME, payload=dict([("sector", [data[0]+1, data[1], data[2]])]))
        else: 
            user=CtxStorage().get(message.from_id)
            sector=SectorModel().create(x=user.sector.x+data[2][0], y=user.sector.y+data[2][1], opener=message.from_id)
            seconds=9000/user.ship.speed
            await state_dispenser.set(message.from_id, SectorState.WAIT, payload=dict([("time", [time.time() + seconds, sector.id])]))
            balance=data[1]*15000
            user.balance+=balance
            user.save()
            await message.answer(f"üí¨ –°–µ–∫—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {balance}", keyboard=await menu_main())
            await message.answer(f"üí¨ –ü–µ—Ä–µ–ª—ë—Ç –∑–∞–π–º–µ—Ç {datetime.timedelta(seconds=seconds)}", keyboard=(Keyboard().add(Text("–û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButtonColor.PRIMARY).get_json())) 
    else:
        await message.answer(f"üí¨ –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ—Ä–Ω—É—Ç—Å—è! –û—Å—Ç–∞–ª–æ—Å—å {data[0]} –∏–∑ {data[1]}\
                             \n\nüí≠ –î–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å \"1\" –∏–ª–∏ \"2\"", keyboard=await menu_game())

@labeler.message(text="–∑–∞—Ö–≤–∞—Ç–∏—Ç—å")
async def occupy(message: Message):
    user=CtxStorage().get(message.from_id)
    if user.clan is None:
        await message.answer(f"–ù–µ–ª—å–∑—è", keyboard=await menu_sector())
        return

@labeler.message(state=SectorState.WAIT)
async def wait(message: Message):
    data = message.state_peer.payload["payload"]["time"]
    seconds = time.time()
    if(data[0] > seconds):
        await message.answer(f"üí¨ –î–æ –ø—Ä–∏–±—ã—Ç–∏—è: {datetime.timedelta(seconds=int(data[0] - seconds))}")
    else:
        user=CtxStorage().get(message.from_id)
        await message.answer(f"üí¨ –ú—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏", keyboard=await menu_main())
        await state_dispenser.delete(message.from_id)
        user.sector=data[1]
        user.save()

@labeler.message(state=SectorState.WARP_WAIT)
async def wait(message: Message):
    data = message.state_peer.payload["payload"]["time"]
    seconds = time.time()
    if(data[0] > seconds):
        await message.answer(f"üí¨ –î–æ –ø—Ä–∏–±—ã—Ç–∏—è: {datetime.timedelta(seconds=int(data[0] - seconds))}")
    else:
        user=CtxStorage().get(message.from_id)
        await message.answer(f"üí¨ –ú—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏", keyboard=await menu_main())
        await state_dispenser.delete(message.from_id)
        user.warp_use=time.time()+user.ship.warp_delay
        user.sector=data[1]
        user.save()

@labeler.message(payload={"menu":"warp"})
async def get_coord(message: Message):
    user=CtxStorage().get(message.from_id)
    if time.time() > user.warp_use:
        await message.answer("üí¨ –°–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", keyboard=Keyboard(one_time=True).add(Text("–û—Ç–º–µ–Ω–∞")))
        await state_dispenser.set(message.from_id, SectorState.WARP)
    else:
        seconds=int(user.warp_use-time.time())
        await message.answer(f"üí¨ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–ª–∏—Ç—Å—è –µ—â–µ: {datetime.timedelta(seconds=seconds)}", keyboard=await menu_sector())

@labeler.message(state=SectorState.WARP)
async def warp(message: Message):
    if message.text.lower() in "–æ—Ç–º–µ–Ω–∞":
        await message.answer(f"üí¨ –í–∞—Ä–ø-–ø—Ä—ã–∂–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω", keyboard=await menu_sector())
        return
    coord = message.text.split(" ")
    if len(coord) > 1:
        sector=SectorModel().get_or_none(x=int(coord[0]), y=int(coord[1]))
    else:
        sector = SectorModel().get_or_none(name=message.text)
    if sector is not None:
        user=CtxStorage().get(message.from_id)
        if sector is not user.sector:
            x=sector.x-user.sector.x
            y=sector.y-user.sector.y
            seconds=9000*int((pow(x, 2)+pow(y, 2))**0.5)/user.ship.warp_speed
            await message.answer(f"üí¨ –ü–µ—Ä–µ–ª—ë—Ç –≤ —Å–µ–∫—Ç–æ—Ä {sector.name} –∑–∞–π–º–µ—Ç {datetime.timedelta(seconds=seconds)}", keyboard=(Keyboard().add(Text("–û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButtonColor.PRIMARY).get_json()))
            await state_dispenser.set(message.from_id, SectorState.WARP_WAIT, payload=dict([("time", [time.time() + seconds, sector.id])]))
        else:
            await message.answer(f"üí¨ –í—ã —É–∂–µ –≤ —ç—Ç–æ–º —Å–µ–∫—Ç–æ—Ä–µ", keyboard=Keyboard(one_time=True).add(Text("–û—Ç–º–µ–Ω–∞")))
    else:
        await message.answer(f"üí¨ –¢–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä –µ—â—ë –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", keyboard=Keyboard(one_time=True).add(Text("–û—Ç–º–µ–Ω–∞")))

@labeler.message(payload_contains={"sector":"flight"})
async def start(message: Message):
    data = json.loads(message.payload)["info"]
    if message.text == "–£–≥—Ä–æ–∑–∞":
        lvl = (pow(int(data[0]), 2) + pow(int(data[1]), 2))
        await state_dispenser.set(message.from_id, SectorState.GAME, payload=dict([("sector", [0 , lvl, data])]))
        await message.answer(f"üí¨ –ß—Ç–æ–±—ã –ø—Ä–æ–ª–æ–∂–∏—Ç—å –ø—É—Ç—å –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É —Å–µ–∫—Ç–æ—Ä—É –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å {lvl} –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏–π\
                             \n\nüí≠ –î–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø—Ä–µ–ø—è–¥—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å \"1\" –∏–ª–∏ \"2\"", keyboard=await menu_game())
    else:
        user=CtxStorage().get(message.from_id)
        seconds = 9000 / user.ship.speed
        x=user.sector.x+data[0]
        y=user.sector.y+data[1]
        id = SectorModel().get_or_none(x=x, y=y)
        await state_dispenser.set(message.from_id, SectorState.WAIT, payload=dict([("time", [time.time() + seconds, id])]))
        await message.answer(f"üí¨ –ü–µ—Ä–µ–ª—ë—Ç –∑–∞–π–º–µ—Ç {datetime.timedelta(seconds=seconds)}", keyboard=(Keyboard().add(Text("–û–±–Ω–æ–≤–∏—Ç—å"), KeyboardButtonColor.PRIMARY).get_json()))