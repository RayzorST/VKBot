import random

from peewee import *
from models.clan import ClanModel
from utils.config import db

def random_name() -> str:
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-"
    result = ""
    l = random.randint(5, 10)
    i = 0
    while i != l:
        result+=random.choice(chars)
        i+=1
    return result

def random_type():
    return random.choice(sector_types)

sector_types=["–ü—É—Å—Ç–æ—à—å", "–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞", 
              "–ñ—ë–ª—Ç—ã–π –∫–∞—Ä–ª–∏–∫", "–ö—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä–ª–∏–∫–∏", 
              "–ë–µ–ª—ã–π –∫–∞—Ä–ª–∏–∫", "–ü—É–ª—å—Å–∞—Ä", 
              "–ù–µ–π—Ç—Ä–æ–Ω–Ω–∞—è", "–ü—Ä–æ—Ç–æ–∑–≤–µ–∑–¥–∞", 
              "–ë–µ–ª—ã–π –≥–∏–≥–∞–Ω—Ç", "–°–≤–µ—Ä—Ö–Ω–æ–≤–∞—è –∑–≤–µ–∑–¥–∞", 
              "–î–≤–æ–π–Ω–∞—è –∑–≤–µ–∑–¥–∞"]
    
class SectorModel(Model):
    class Meta:
        database = db
        db_table = 'Sectors'
    #meta
    id = IntegerField(null=False, primary_key=True)

    #info
    name = CharField(null=False, default="None")
    opener = IntegerField(null=False, default=-1)
    type = CharField(null=False, choices=sector_types, default=sector_types[0])
    x = IntegerField(null=False, default=0)
    y = IntegerField(null=False, default=0)

    #clan
    level = IntegerField(null=False,default=0)
    owner = ForeignKeyField(ClanModel, null=True, default=None)

    #resources
    titan = IntegerField(null=False, default=0)
    plasma = IntegerField(null=False, default=0)
    damask = IntegerField(null=False, default=0)
    energy = IntegerField(null=False, default=0)

    def create(self,x=0, y=0, opener=-1, type: str = None, resources: bool = True):
        self.name=random_name()
        self.opener=opener
        self.x=x
        self.y=y
        self.type = (type if type is not None else random_type())
        if resources is True and self.type not in ["–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞", "–ü—É—Å—Ç–æ—à—å"]:
            self.titan=random.randint(0, 50)+random.randint(0, 50)
            self.plasma=random.randint(0, 50)+random.randint(0, 50)
            self.damask=random.randint(0, 50)+random.randint(0, 50)
            self.energy=random.randint(0, 50)+random.randint(0, 50)
        self.save()
        return self
    

    def info(self):
        return f"{'üåÄ' if self.type in ['–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞', '–ü—É—Å—Ç–æ—à—å'] else 'üîÜ'} –ù–∞–∑–≤–∞–Ω–∏–µ: {self.name}\
             \nüåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {self.x}:{self.y}\
             \n‚õè –†–µ—Å—É—Ä—Å—ã: {get_resources(self.titan + self.energy + self.damask + self.plasma)}"

    def to_string(self):
        from models.user import UserModel
        
        opener=UserModel().get_or_none(self.opener)
        return f"üí¨ –í–æ—Ç –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º —Å–µ–∫—Ç–æ—Ä–µ\
            \n\n‚ú® –ù–∞–∑–≤–∞–Ω–∏–µ: {self.name}\
            \nüë• –û—Ç–∫—Ä—ã–ª: {f"@id{opener.id} ({opener.name})" if opener is not None else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\
            \n{'üåÄ' if self.type in ['–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞', '–ü—É—Å—Ç–æ—à—å'] else 'üîÜ'} –¢–∏–ø: {self.type}\
            \nüåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {self.x}:{self.y}\
            \nüõ° –ö–ª–∞–Ω: {self.owner.name + ' : ' + str(self.level) if self.owner is not None else '–Ω–µ—Ç'}\
            \n\n‚õè –®–∞–Ω—Å –Ω–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å:\
            \nüü™ –¢–∏—Ç–∞–Ω: {self.titan}%\
            \nüü• –ü–ª–∞–∑–º–∞: {self.plasma}%\
            \nüü© –î–∞–º–∞—Å–∫: {self.damask}%\
            \nüü® –≠–Ω–µ—Ä–≥–∏—è: {self.energy}%"

def get_resources(res: int) -> str:
    res /= 4
    if res == 0:
        return "–û—Ç—Å—É—Ç—Å–≤—É—é—Ç"
    elif res <= 20:
        return "–î–µ—Ñ–∏—Ü–∏—Ç"
    elif res <= 60:
        return "–£–º–µ—Ä–µ–Ω–Ω–æ"
    elif res <= 100:
        return "–ò–∑–æ–±–∏–ª–µ–µ"
    else:
        return "–û—à–∏–±–∫–∞"