from vkbottle import Keyboard, KeyboardButtonColor, EMPTY_KEYBOARD, Text

#main

text_main = "üí¨ –û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é...\n\
    \n–ü—Ä–æ—Ñ–∏–ª—å\
    \n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\
    \n–°–µ–∫—Ç–æ—Ä"

async def menu_main() -> str:
    return (Keyboard()
    .add(Text("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButtonColor.PRIMARY)
    .add(Text("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"), KeyboardButtonColor.PRIMARY)
    .add(Text("–°–µ–∫—Ç–æ—Ä"), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–≤–∏–≥–∞—Ü–∏—è", {"menu":"nav"}), KeyboardButtonColor.POSITIVE)
    .add(Text("–ë–∞–∑–∞", {"menu":"base"}), KeyboardButtonColor.POSITIVE)
    .add(Text("–ö–ª–∞–Ω", {"menu":"clanmenu"}), KeyboardButtonColor.POSITIVE)
    #.row()
    #.add(Text("–î—É—ç–ª—å", {"menu":"duel"}), KeyboardButtonColor.NEGATIVE)
    ).get_json()

text_admin = "–ö–æ–º–∞–Ω–¥—ã: \n–ë–∞–Ω <id>"

async def menu_admin() -> str:
    return (Keyboard()
    .add(Text("–ö–æ–ª –Æ–∑–µ—Ä–æ–≤", {"menu":"admin"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–ö–æ–ª –ö–ª–∞–Ω–æ–≤", {"menu":"admin"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–ö–æ–ª –°–µ–∫—Ç–æ—Ä–æ–≤", {"menu":"admin"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–ö–æ–ª –ë–∞–∑", {"menu":"admin"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"admin"}))
    .add(Text("–í—ã–∫–ª—é—á–∏—Ç—å", {"menu":"admin"}), KeyboardButtonColor.NEGATIVE)
    .get_json())

#sector

text_sector="—Å–µ–∫—Ç–æ—Ä"        

async def menu_sector() -> str:
    return (Keyboard()
    .add(Text("–ö–∞—Ä—Ç–∞"), KeyboardButtonColor.POSITIVE)
    .row()
    .add(Text("–ü–µ—Ä–µ–ª—ë—Ç", {"menu":"sector"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–í–∞—Ä–ø-–ø—Ä—ã–∂–æ–∫", {"menu":"warp"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ó–∞—Ö–≤–∞—Ç–∏—Ç—å", {"menu":"clan"}), KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"sector"}))
    ).get_json()

text_flight="–ø–æ–ª–µ—Ç" 

async def menu_flight(sectors: []) -> str:
    return (Keyboard(one_time=True)
    .add(Text(f"{sectors[2].name if not isinstance(sectors[2], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[-1, 1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[2], list) else KeyboardButtonColor.NEGATIVE)
    .add(Text(f"{sectors[4].name if not isinstance(sectors[4], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[0, 1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[4], list) else KeyboardButtonColor.NEGATIVE)
    .add(Text(f"{sectors[7].name if not isinstance(sectors[7], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[1, 1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[7], list) else KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text(f"{sectors[1].name if not isinstance(sectors[1], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[-1, 0]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[1], list) else KeyboardButtonColor.NEGATIVE)
    .add(Text("–û–±–Ω–æ–≤–∏—Ç—å", {"menu":"sector"}), KeyboardButtonColor.SECONDARY)
    .add(Text(f"{sectors[6].name if not isinstance(sectors[6], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[1, 0]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[6], list) else KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text(f"{sectors[0].name if not isinstance(sectors[0], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[-1, -1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[0], list) else KeyboardButtonColor.NEGATIVE)
    .add(Text(f"{sectors[3].name if not isinstance(sectors[3], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[0, 1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[3], list) else KeyboardButtonColor.NEGATIVE)
    .add(Text(f"{sectors[5].name if not isinstance(sectors[5], list) else '–£–≥—Ä–æ–∑–∞'}", {"sector":"flight", "info":[1, -1]}), KeyboardButtonColor.POSITIVE if not isinstance(sectors[5], list) else KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"flight"}))
    ).get_json()

async def menu_game() -> str:
    return (Keyboard(one_time=True)
    .add(Text(1), KeyboardButtonColor.PRIMARY)
    .add(Text(2), KeyboardButtonColor.PRIMARY)
    ).get_json()

#Clan

text_clan1="–º–µ–Ω—é –∫–ª–∞–Ω–∞"

async def menu_clan1() -> str:
    return (Keyboard()
    .add(Text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"clan"}))
    .add(Text("–í—ã–π—Ç–∏", {"menu":"clan"}), KeyboardButtonColor.NEGATIVE)
    ).get_json()

text_clan2="–ö–ª–∞–Ω"

async def menu_clan2() -> str:
    return (Keyboard()
    .add(Text("–í–æ–π—Ç–∏", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–¢–æ–ø", {"menu":"clan"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"clan"}))
    ).get_json()

async def menu_clan_settings(settings: []) -> str:
    return (Keyboard()
    .add(Text("–°–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥", {"clan":"settings"}), KeyboardButtonColor.POSITIVE if settings[0] is True else KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text("–¶–≤–µ—Ç"))
    .add(Text(settings[1][0], {"clan":"settings", "color":"red"}), KeyboardButtonColor.NEGATIVE)
    .add(Text(settings[1][1], {"clan":"settings", "color":"green"}), KeyboardButtonColor.POSITIVE)
    .add(Text(settings[1][2], {"clan":"settings", "color":"blue"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"clan":"settings"}))
    ).get_json()

text_clan_resources="–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å"

async def menu_clan_resources() -> str:
    return (Keyboard()
    .add(Text("–¢–∏—Ç–∞–Ω", {"clan":"resources"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–ü–ª–∞–∑–º–∞", {"clan":"resources"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–î–∞–º–∞—Å–∫–∞", {"clan":"resources"}), KeyboardButtonColor.PRIMARY)
    .add(Text("–≠–Ω–µ—Ä–≥–∏—è", {"clan":"resources"}), KeyboardButtonColor.PRIMARY)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"clan":"resources"}))
    ).get_json()

async def menu_free_clans(clans: [], n: int = 0) -> str:
    clan_len = len(clans)
    return (Keyboard()
    .add(Text(f"{clans[n].name}" if n < clan_len else "-", {"clan":"choose", "info":clans[n].id if n < clan_len else -1}), KeyboardButtonColor.PRIMARY if n < clan_len else KeyboardButtonColor.SECONDARY)
    .add(Text(f"{clans[1+n].name}" if n+1 < clan_len else "-", {"clan":"choose", "info":clans[1+n].id  if n+1 < clan_len else -1}), KeyboardButtonColor.PRIMARY if n+1 < clan_len else KeyboardButtonColor.SECONDARY)
    .row()
    .add(Text(f"{clans[2+n].name}" if n+2 < clan_len else "-", {"clan":"choose", "info":clans[2+n].id  if n+2 < clan_len else -1}), KeyboardButtonColor.PRIMARY if n+2 < clan_len else KeyboardButtonColor.SECONDARY)
    .add(Text(f"{clans[3+n].name}" if n+3 < clan_len else "-", {"clan":"choose", "info":clans[3+n].id  if n+3 < clan_len else -1}), KeyboardButtonColor.PRIMARY if n+3 < clan_len else KeyboardButtonColor.SECONDARY)
    .row()
    .add(Text(f"{clans[4+n].name}" if n+4 < clan_len else "-", {"clan":"choose", "info":clans[4+n].id  if n+4 < clan_len else -1}), KeyboardButtonColor.PRIMARY if n+4 < clan_len else KeyboardButtonColor.SECONDARY)
    .add(Text(f"{clans[5+n].name}" if n+5 < clan_len else "-", {"clan":"choose", "info":clans[5+n].id  if n+5 < clan_len else -1}), KeyboardButtonColor.PRIMARY if n+5 < clan_len else KeyboardButtonColor.SECONDARY)
    .row()
    .add(Text("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ", {"clan":"enter", "info":n-6}), KeyboardButtonColor.POSITIVE if n != 0 else KeyboardButtonColor.NEGATIVE)
    .add(Text(f"{int(n/6+1)}/{int(clan_len/6)+1}"))
    .add(Text("–°–ª–µ–¥—É—é—â–∏–µ", {"clan":"enter", "info":n+6}), KeyboardButtonColor.POSITIVE if n+6 <= int(clan_len) else KeyboardButtonColor.NEGATIVE)
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"clan":"enter"}))
    ).get_json()

#base

async def menu_base() -> str:
    return (Keyboard()
    .add(Text("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å", {"base":"menu"}), KeyboardButtonColor.POSITIVE) 
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"base":"menu"}))  
    ).get_json()

#duel

text_duel="–ú–µ–Ω—é –¥—É—ç–ª–µ–π"

async def menu_duel() -> str:
    return (Keyboard()
    .add(Text("–°—Ä–∞–∂–µ–Ω–∏–µ", {"menu":"duel"}))
    .row()
    .add(Text("–ù–∞–∑–∞–¥", {"menu":"duel"}))
    ).get_json()